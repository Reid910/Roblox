local module = {
	Logs = {}
}

local MessagingService = game:GetService("MessagingService")
local OSS = game:GetService("DataStoreService"):GetOrderedDataStore("Servers")--OrderedServerStore
local OSM = game:GetService("DataStoreService"):GetOrderedDataStore("OSM")--ORDERED STOCK MARKET ordered by Stock Value
local UOSM = game:GetService("DataStoreService"):GetDataStore("OSM")

function SubscribeAddToLogs(Msg)
	table.insert(module.Logs,Msg.Data)
end

function module.StartLogs(Data)
	MessagingService:SubscribeAsync("LOGS",SubscribeAddToLogs)
	table.insert(module.Logs,Data)
end

function module.print()
	local Str = ""
	for i,v in pairs(module.Logs) do
		Str = Str..v.."\n"
	end
	local t = os.date("*t", os.time())
	print("\n------logs\n"..Str.."ET -> ( "..t["month"].."/"..t["day"].."/"..t["year"].."-"..t["hour"]..":"..t["min"]..":"..t["sec"].." )\n------eol")
end

function module.servers(TimeDelay)
	local Pages = OSS:GetSortedAsync(false,10)
	if #Pages:GetCurrentPage() > 0 then
		while true do
			local Str = ""
			for i,v in pairs(Pages:GetCurrentPage()) do
				Str = Str.."ServerID ( "..v.key.." ) #Plrs ( "..v.value.." )\n"
			end
			local t = os.date("*t",os.time())
			print("-servers-\n"..Str.."ET -> ( "..t["month"].."/"..t["day"].."/"..t["year"].."-"..t["hour"]..":"..t["min"]..":"..t["sec"].." )\n------eosl")
			if Pages.IsFinished then
				break
			end
			if TimeDelay then
				wait(TimeDelay)
			else
				wait()
			end
			Pages:AdvanceToNextPageAsync()
		end
	else
		print("No Servers To Print.")
	end
end

function module.stocks(TimeDelay)
	local Pages = OSM:GetSortedAsync(false,10)
	if #Pages:GetCurrentPage() > 0 then
		while true do
			local Str = ""
			for i,v in pairs(Pages:GetCurrentPage()) do
				local Data = UOSM:GetAsync(v.key)
				Str = Str.."StockName ( "..v.key.." ) Total Shares ( "..v.value.." ) Stock Cost ( "..Data[4].." ) Net ( "..Data[2].." ) % Increase ( "..Data[3].." ) Company Owner ( "..Data[1].." )\n"
			end
			local t = os.date("*t",os.time())
			print("-stocks-\n"..Str.."ET -> ( "..t["month"].."/"..t["day"].."/"..t["year"].."-"..t["hour"]..":"..t["min"]..":"..t["sec"].." )\n------eos")
			if Pages.IsFinished then
				break
			end
			if TimeDelay then
				wait(TimeDelay)
			else
				wait()
			end
			Pages:AdvanceToNextPageAsync()
		end
	else
		print("No Stocks To Print.")
	end
end

return module
